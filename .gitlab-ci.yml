before_script:
   - apt-get update -y
   - apt-get install build-essential locales unzip wget zlib1g-dev libstdc++-11-dev -y
   - wget https://github.com/Kitware/CMake/releases/download/v3.24.4/cmake-3.24.4-linux-x86_64.tar.gz
   - tar xvzf cmake-3.24.4-linux-x86_64.tar.gz -C /opt
   - rm -f cmake-3.24.4-linux-x86_64.tar.gz
   - wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.0.1%2Bcpu.zip -O libtorch.zip
   - unzip libtorch.zip -d /opt
   - rm -f libtorch.zip
   - export PATH=$PATH:/opt/cmake-3.24.4-linux-x86_64/bin
   - locale-gen --purge en_US.UTF-8
   - echo -e 'LANG="en_US.UTF-8"\nLANGUAGE="en_US:en"\n' > /etc/default/locale
   - export LANG=en_US.UTF-8
   - export LC_ALL=en_US.UTF-8

stages:
  - build
  - test

default:
  image: ubuntu:22.04
  only:
    changes:
      - .gitlab-ci.yml
      - CMakeLists.txt
      - cmake/*
      - docs/*
      - include/*
      - examples/*
      - perftests/*
      - pyiganet/*
      - unittests/*
      - server/*
      
#
# Create Doxygen documentation
#
pages:
  stage: build
  script:
    - apt-get update -y
    - apt-get install doxygen texlive-binaries texlive-font-utils -y
    - mkdir -p build
    - cd build
    - CC=gcc CXX=g++ cmake .. -DIGANET_BUILD_DOCS=ON -DTorch_DIR=/opt/libtorch/share/cmake/Torch -DIGANET_WITH_MATPLOT=OFF
    - make Doxygen
    - mv docs/doxygen/html ../public
    - mv docs/doxygen/*.xml ../public 
  artifacts:
    paths:
      - public

#
# Build UnitTests with GNU compiler collection
#
build-unittests-gcc:
  stage: build
  script:
    - mkdir -p build
    - cd build
    - CC=gcc CXX=g++ cmake .. -DIGANET_BUILD_UNITTESTS=ON -DTorch_DIR=/opt/libtorch/share/cmake/Torch -DIGANET_WITH_MATPLOT=OFF
    - make
  artifacts:
    paths:
      - build

#
# Build WebApps with GNU compiler collection
#
build-webapps-gcc:
  stage: build
  script:
    - mkdir -p build
    - cd build
    - CC=gcc CXX=g++ cmake .. -DIGANET_BUILD_WEBAPPS=ON -DIGANET_BUILD_EXAMPLES=OFF -DTorch_DIR=/opt/libtorch/share/cmake/Torch -DIGANET_WITH_MATPLOT=OFF
    - make
  artifacts:
    paths:
      - build

#
# Run UnitTests with GNU compiler collection
#
test-unittests-gcc:
  stage: test
  needs: [build-unittests-gcc]
  script:
    - cd build
    - make test
    
#
# Build unittests with Clang compiler
#
build-unittests-clang:
  stage: build
  script:
    - apt-get update -y
    - apt-get install clang libomp-dev -y
    - mkdir -p build
    - cd build
    - CC=clang CXX=clang++ cmake .. -DIGANET_BUILD_UNITTESTS=ON -DTorch_DIR=/opt/libtorch/share/cmake/Torch -DIGANET_WITH_MATPLOT=OFF -DOpenMP_C_FLAGS="-Xpreprocessor -fopenmp -I/usr/lib/llvm-14/lib/clang/14.0.0/include" -DOpenMP_C_LIB_NAMES=libomp -DOpenMP_CXX_FLAGS="-Xpreprocessor -fopenmp -I/usr/lib/llvm-14/lib/clang/14.0.0/include" -DOpenMP_CXX_LIB_NAMES=libomp -DOpenMP_libomp_LIBRARY=/usr/lib/llvm-14/lib/libomp.so
    - make
  artifacts:
    paths:
      - build

#
# Build WebApps with Clang compiler
#
build-webapps-clang:
  stage: build
  script:
    - apt-get update -y
    - apt-get install clang libomp-dev -y
    - mkdir -p build
    - cd build
    - CC=clang CXX=clang++ cmake .. -DIGANET_BUILD_WEBAPPS=ON -DIGANET_BUILD_EXAMPLES=OFF -DTorch_DIR=/opt/libtorch/share/cmake/Torch -DIGANET_WITH_MATPLOT=OFF -DOpenMP_C_FLAGS="-Xpreprocessor -fopenmp -I/usr/lib/llvm-14/lib/clang/14.0.0/include" -DOpenMP_C_LIB_NAMES=libomp -DOpenMP_CXX_FLAGS="-Xpreprocessor -fopenmp -I/usr/lib/llvm-14/lib/clang/14.0.0/include" -DOpenMP_CXX_LIB_NAMES=libomp -DOpenMP_libomp_LIBRARY=/usr/lib/llvm-14/lib/libomp.so
    - make
  artifacts:
    paths:
      - build
      
#
# Run unittests with Clang compiler
#
test-unittests-clang:
  stage: test
  needs: [build-unittests-clang]
  script:
    - cd build
    - make test
